{
  "app": {
    "start": "{{name}} Démarré",
    "stop": "{{name}} Arrêté",
    "redpanda": {
      "REDPANDA_PRODUCER_CONNECTED": "RedPanda Producer connecté.",
      "REDPANDA_PRODUCER_DISCONNECTED": "RedPanda Producer déconnecté.",
      "REDPANDA_CONSUMER_CONNECTED": "RedPanda Consumer connecté.",
      "REDPANDA_CONSUMER_DISCONNECTED": "RedPanda Consumer déconnecté."
    },
    "database": {
      "DB_CONNECTED": "Database connectée.",
      "DB_DISCONNECTED": "Database déconnectée."
    },
    "signal": {
      "SIGINT": "SIGINT (Ctrl-C) reçu."
    },
    "httpServer": {
      "HTTP_SERVER_LISTENING": "Le serveur HTTP est en écoute sur le port {{port}} en mode {{mode}}. (Prefix: {{prefix}}) PID: {{pid}}",
      "HTTP_SERVER_CLOSE": "Le serveur HTTP est arrêté."
    }
  },
  "error": {
    "errorConfig": {
      "DB_HOST_NOT_FOUND": "DB_HOST environment variable not found.",
      "DB_NAME_NOT_FOUND": "DB_NAME environment variable not found.",
      "DB_PASSWORD_NOT_FOUND": "DB_PASSWORD environment variable not found.",
      "DB_USER_NOT_FOUND": "DB_USER environment variable not found.",
      "DB_PORT_NOT_FOUND": "DB_PORT environment variable not found.",
      "COOKIE_SECRET_NOT_FOUND": "COOKIE_SECRET environment variable not found.",
      "HOST_NOT_FOUND": "HOST environment variable not found.",
      "HTTP_PORT_NOT_FOUND": "HTTP_PORT environment variable not found.",
      "NODE_ENV_NOT_FOUND": "NODE_ENV environment variable not found.",
      "RED_PANDA_BROKER_NOT_FOUND": "RED_PANDA_BROKER environment variable not found.",
      "WS_PORT_NOT_FOUND": "WS_PORT environment variable not found."
    },
    "errorInfrastructure": {
      "KAFKA_PRODUCER_CONNECTION_ERROR": "Kafka producteur erreur de connexion.",
      "KAFKA_PRODUCER_IS_NOT_CONNECTED": "Kafka producteur n'est pas connecté.",
      "KAFKA_PRODUCER_DISCONNECT_ERROR": "Kafka producteur erreur de déconnexion.",
      "KAFKA_PRODUCER_SEND_ERROR": "Kafka producteur erreur d'envoi.",
      "KAFKA_CONSUMER_CONNECTION_ERROR": "Kafka consommateur erreur de connexion.",
      "KAFKA_CONSUMER_IS_NOT_CONNECTED": "Kafka consommateur n'est pas connecté.",
      "KAFKA_CONSUMER_SUBSCRIBE_ERROR": "Kafka consommateur erreur d'abonnement.",
      "KAFKA_CONSUMER_DISCONNECT_ERROR": "Kafka consommateur erreur de déconnexion."
    },
    "errorValidator": {
      "USERNAME_MIN_LENGTH": "Le nom d'utilisateur doit contenir au moins 4 caractères.",
      "USERNAME_MAX_LENGTH": "Le nom d'utilisateur doit contenir au maximum 20 caractères.",
      "USERNAME_PATTERN": "Le nom d'utilisateur ne doit contenir que des lettres, des chiffres, des tirets et des underscores.",
      "EMAIL_MIN_LENGTH": "L'email doit contenir au moins 10 caractères.",
      "EMAIL_MAX_LENGTH": "L'email doit contenir au maximum 255 caractères.",
      "EMAIL_PATTERN_AND_BLACKLIST": "L'email doit être valide et ne doit pas être sur liste noire.",
      "PASSWORD_MIN_LENGTH": "Le mot de passe doit contenir au moins 8 caractères.",
      "PASSWORD_MAX_LENGTH": "Le mot de passe doit contenir au maximum 32 caractères.",
      "PASSWORD_PATTERN": "Le mot de passe doit contenir au moins une lettre majuscule, une lettre minuscule, un chiffre et un caractère spécial."
    },
    "errorDatabase": {
      "DB_CONNECTION_ERROR": "Erreur de connexion à la base de données.",
      "DB_DISCONNECT_ERROR": "Erreur de déconnexion de la base de données.",
      "MODEL_NOT_CREATED": "Le modèle n'a pas été créé.",
      "MODEL_UNIQUE_CONSTRAINT_ERROR": "Le modèle {{tableName}} a une erreur de contrainte unique. [{{constraint}}]",
      "MODEL_NOT_FOUND": "Le modèle {{tableName}} n'a pas été trouvé.",
      "MODEL_NOT_UPDATED": "Le modèle {{tableName}}  n'a pas été mis à jour.",
      "MODEL_NOT_DELETED": "Le modèle {{tableName}} n'a pas été supprimé.",
      "OTHER_DATABASE_ERROR": "Erreur de base de données inconnue."
    }
  },
  "http": {
    "plugin": {
      "RateLimitPlugin": {
        "RATE_LIMIT": "Rate limit {{max}} atteint. Veuillez réessayer dans {{max}} secondes."
      }
    },
    "handler": {
      "statusHandler": {
        "health": "OK"
      },
      "authHandler": {
        "login": "Connexion réussie.",
        "logout": "Déconnexion réussie.",
        "register": "Inscription réussie."
      }
    }
  }
}
